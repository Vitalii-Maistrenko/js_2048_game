{"mappings":"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","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nvar data = [\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ]\n];\nvar score = 0;\nvar inProgress = false;\nvar start = document.querySelector(\".start\");\nvar messageWin = document.querySelector(\".message-win\");\nvar messageStart = document.querySelector(\".message-start\");\nvar messageLose = document.querySelector(\".message-lose\");\nstart.addEventListener(\"click\", function() {\n    if (start.innerText === \"Start\") {\n        start.innerText = \"Restart\";\n        start.classList.replace(\"start\", \"restart\");\n        messageStart.classList.add(\"hidden\");\n    } else {\n        clearField();\n        score = 0;\n        messageLose.classList.add(\"hidden\");\n        messageWin.classList.add(\"hidden\");\n    }\n    randomizer(2);\n    inProgress = true;\n    domReload();\n});\ndocument.addEventListener(\"keydown\", function(e) {\n    if (!inProgress) return;\n    var prevData = JSON.parse(JSON.stringify(data));\n    var moveExecuted = false;\n    switch(e.key){\n        case \"ArrowRight\":\n            if (isGameOver() === false) {\n                mergeTiles(\"right\");\n                tileMovement(\"right\");\n                isWin();\n                moveExecuted = true;\n            }\n            break;\n        case \"ArrowLeft\":\n            if (isGameOver() === false) {\n                mergeTiles(\"left\");\n                tileMovement(\"left\");\n                isWin();\n                moveExecuted = true;\n            }\n            break;\n        case \"ArrowDown\":\n            if (isGameOver() === false) {\n                mergeTiles(\"down\");\n                tileMovement(\"down\");\n                isWin();\n                moveExecuted = true;\n            }\n            break;\n        case \"ArrowUp\":\n            if (isGameOver() === false) {\n                mergeTiles(\"up\");\n                tileMovement(\"up\");\n                isWin();\n                moveExecuted = true;\n            }\n            break;\n    }\n    if (moveExecuted && !isEqual(prevData, data)) {\n        randomizer(1);\n        if (isGameOver()) {\n            inProgress = false;\n            messageLose.classList.remove(\"hidden\");\n            domReload();\n        } else domReload();\n    }\n});\nfunction isEqual(arr1, arr2) {\n    return JSON.stringify(arr1) === JSON.stringify(arr2);\n}\nfunction tileMovement(direction) {\n    var _loop = function(i) {\n        var values = void 0;\n        if (direction === \"right\" || direction === \"left\") {\n            var nonZeroValues = data[i].filter(function(element) {\n                return element !== 0;\n            });\n            var zeroValues = data[i].filter(function(element) {\n                return element === 0;\n            });\n            values = direction === \"right\" ? zeroValues.concat(nonZeroValues) : nonZeroValues.concat(zeroValues);\n            data[i] = values;\n        } else if (direction === \"down\" || direction === \"up\") {\n            var column = [];\n            for(var row = 0; row < data.length; row++)column.push(data[row][i]);\n            var nonZeroValues1 = column.filter(function(element) {\n                return element !== 0;\n            });\n            var zeroValues1 = column.filter(function(element) {\n                return element === 0;\n            });\n            values = direction === \"down\" ? zeroValues1.concat(nonZeroValues1) : nonZeroValues1.concat(zeroValues1);\n            for(var j = 0; j < data.length; j++)data[j][i] = values[j];\n        }\n    };\n    for(var i = 0; i < data.length; i++)_loop(i);\n}\nfunction mergeTiles(direction) {\n    var _loop = function(tile) {\n        var values = [];\n        var merged = Array(data.length).fill(false);\n        if (direction === \"down\" || direction === \"up\") for(var row = 0; row < data.length; row++)values.push(data[row][tile]);\n        else if (direction === \"left\" || direction === \"right\") values = data[tile].slice();\n        var nonZeroValues = values.filter(function(element) {\n            return element !== 0;\n        });\n        var zeroValues = values.filter(function(element) {\n            return element === 0;\n        });\n        if (direction === \"down\" || direction === \"right\") {\n            for(var i = nonZeroValues.length - 1; i > 0; i--)if (nonZeroValues[i] === nonZeroValues[i - 1] && !merged[i]) {\n                nonZeroValues[i] += nonZeroValues[i - 1];\n                score += nonZeroValues[i];\n                nonZeroValues[i - 1] = 0;\n                merged[i] = true;\n            }\n            values = zeroValues.concat(nonZeroValues);\n        } else if (direction === \"up\" || direction === \"left\") {\n            for(var i1 = 0; i1 < nonZeroValues.length - 1; i1++)if (nonZeroValues[i1] === nonZeroValues[i1 + 1] && !merged[i1]) {\n                nonZeroValues[i1] += nonZeroValues[i1 + 1];\n                score += nonZeroValues[i1];\n                nonZeroValues[i1 + 1] = 0;\n                merged[i1] = true;\n            }\n            values = nonZeroValues.concat(zeroValues);\n        }\n        if (direction === \"down\" || direction === \"up\") for(var row1 = 0; row1 < data.length; row1++)data[row1][tile] = values[row1];\n        else if (direction === \"left\" || direction === \"right\") data[tile] = values.slice();\n    };\n    for(var tile = 0; tile < data.length; tile++)_loop(tile);\n}\nfunction randomizer(count) {\n    for(var i = 0; i < count; i++){\n        var emptyPositions = [];\n        for(var row = 0; row < data.length; row++){\n            for(var tile = 0; tile < data[row].length; tile++)if (data[row][tile] === 0) emptyPositions.push({\n                row: row,\n                tile: tile\n            });\n        }\n        if (emptyPositions.length > 0) {\n            var randomIndex = Math.floor(Math.random() * emptyPositions.length);\n            var _emptyPositions_randomIndex = emptyPositions[randomIndex], row1 = _emptyPositions_randomIndex.row, tile1 = _emptyPositions_randomIndex.tile;\n            var randomNumber = Math.random() * 2 > 1.9 ? 4 : 2;\n            data[row1][tile1] = randomNumber;\n        }\n    }\n}\nfunction colorizing() {\n    var fieldsRows = document.querySelectorAll(\".field-row\");\n    var classMap = {\n        0: \"\",\n        2: \"field-cell--2\",\n        4: \"field-cell--4\",\n        8: \"field-cell--8\",\n        16: \"field-cell--16\",\n        32: \"field-cell--32\",\n        64: \"field-cell--64\",\n        128: \"field-cell--128\",\n        256: \"field-cell--256\",\n        512: \"field-cell--512\",\n        1024: \"field-cell--1024\",\n        2048: \"field-cell--2048\"\n    };\n    for(var row = 0; row < data.length; row++){\n        var cellsInRow = fieldsRows[row].querySelectorAll(\".field-cell\");\n        for(var tile = 0; tile < data[row].length; tile++){\n            var cellValue = data[row][tile];\n            cellsInRow[tile].className = \"field-cell \" + classMap[cellValue];\n        }\n    }\n}\nfunction isWin() {\n    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n    try {\n        for(var _iterator = data[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n            var row = _step.value;\n            var _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;\n            try {\n                for(var _iterator1 = row[Symbol.iterator](), _step1; !(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion1 = true){\n                    var tile = _step1.value;\n                    if (tile === 2048) {\n                        messageWin.classList.remove(\"hidden\");\n                        inProgress = false;\n                    }\n                }\n            } catch (err) {\n                _didIteratorError1 = true;\n                _iteratorError1 = err;\n            } finally{\n                try {\n                    if (!_iteratorNormalCompletion1 && _iterator1.return != null) {\n                        _iterator1.return();\n                    }\n                } finally{\n                    if (_didIteratorError1) {\n                        throw _iteratorError1;\n                    }\n                }\n            }\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally{\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n            }\n        } finally{\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n}\nfunction clearField() {\n    data = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ];\n}\nfunction domReload() {\n    var scoreBlock = document.querySelector(\".game-score\");\n    for(var row = 0; row < data.length; row++)for(var tile = 0; tile < data.length; tile++){\n        var startRow = document.querySelectorAll(\".field-row\")[row];\n        var startTile = startRow.querySelectorAll(\".field-cell\")[tile];\n        if (data[row][tile] === 0) {\n            startTile.textContent = \" \";\n            continue;\n        }\n        startTile.textContent = data[row][tile];\n    }\n    scoreBlock.textContent = score;\n    colorizing();\n}\nfunction isGameOver() {\n    if (data.some(function(row) {\n        return row.includes(0);\n    })) return false;\n    for(var row = 0; row < data.length; row++)for(var tile = 0; tile < data.length - 1; tile++){\n        if (data[row][tile] === data[row][tile + 1]) return false;\n    }\n    for(var tile1 = 0; tile1 < data.length; tile1++)for(var row1 = 0; row1 < data.length - 1; row1++){\n        if (data[row1][tile1] === data[row1 + 1][tile1]) return false;\n    }\n    return true;\n}\n\n//# sourceMappingURL=index.49ab7a26.js.map\n","'use strict';\n\nlet data = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\nlet score = 0;\nlet inProgress = false;\n\nconst start = document.querySelector('.start');\nconst messageWin = document.querySelector('.message-win');\nconst messageStart = document.querySelector('.message-start');\nconst messageLose = document.querySelector('.message-lose');\n\nstart.addEventListener('click', () => {\n  if (start.innerText === 'Start') {\n    start.innerText = 'Restart';\n    start.classList.replace('start', 'restart');\n    messageStart.classList.add('hidden');\n  } else {\n    clearField();\n    score = 0;\n    messageLose.classList.add('hidden');\n    messageWin.classList.add('hidden');\n  }\n\n  randomizer(2);\n\n  inProgress = true;\n  domReload();\n});\n\ndocument.addEventListener('keydown', (e) => {\n  if (!inProgress) {\n    return;\n  }\n\n  const prevData = JSON.parse(JSON.stringify(data));\n\n  let moveExecuted = false;\n\n  switch (e.key) {\n    case 'ArrowRight':\n      if (isGameOver() === false) {\n        mergeTiles('right');\n        tileMovement('right');\n        isWin();\n        moveExecuted = true;\n      }\n      break;\n\n    case 'ArrowLeft':\n      if (isGameOver() === false) {\n        mergeTiles('left');\n        tileMovement('left');\n        isWin();\n        moveExecuted = true;\n      }\n      break;\n\n    case 'ArrowDown':\n      if (isGameOver() === false) {\n        mergeTiles('down');\n        tileMovement('down');\n        isWin();\n        moveExecuted = true;\n      }\n      break;\n\n    case 'ArrowUp':\n      if (isGameOver() === false) {\n        mergeTiles('up');\n        tileMovement('up');\n        isWin();\n        moveExecuted = true;\n      }\n      break;\n  }\n\n  if (moveExecuted && !isEqual(prevData, data)) {\n    randomizer(1);\n\n    if (isGameOver()) {\n      inProgress = false;\n      messageLose.classList.remove('hidden');\n      domReload();\n    } else {\n      domReload();\n    }\n  }\n});\n\nfunction isEqual(arr1, arr2) {\n  return JSON.stringify(arr1) === JSON.stringify(arr2);\n}\n\nfunction tileMovement(direction) {\n  for (let i = 0; i < data.length; i++) {\n    let values;\n\n    if (direction === 'right' || direction === 'left') {\n      const nonZeroValues = data[i].filter((element) => element !== 0);\n      const zeroValues = data[i].filter((element) => element === 0);\n\n      values = direction === 'right' ? zeroValues.concat(nonZeroValues)\n        : nonZeroValues.concat(zeroValues);\n      data[i] = values;\n    } else if (direction === 'down' || direction === 'up') {\n      const column = [];\n\n      for (let row = 0; row < data.length; row++) {\n        column.push(data[row][i]);\n      }\n\n      const nonZeroValues = column.filter((element) => element !== 0);\n      const zeroValues = column.filter((element) => element === 0);\n\n      values = direction === 'down' ? zeroValues.concat(nonZeroValues)\n        : nonZeroValues.concat(zeroValues);\n\n      for (let j = 0; j < data.length; j++) {\n        data[j][i] = values[j];\n      }\n    }\n  }\n}\n\nfunction mergeTiles(direction) {\n  for (let tile = 0; tile < data.length; tile++) {\n    let values = [];\n    const merged = Array(data.length).fill(false);\n\n    if (direction === 'down' || direction === 'up') {\n      for (let row = 0; row < data.length; row++) {\n        values.push(data[row][tile]);\n      }\n    } else if (direction === 'left' || direction === 'right') {\n      values = data[tile].slice();\n    }\n\n    const nonZeroValues = values.filter((element) => element !== 0);\n    const zeroValues = values.filter((element) => element === 0);\n\n    if (direction === 'down' || direction === 'right') {\n      for (let i = nonZeroValues.length - 1; i > 0; i--) {\n        if (nonZeroValues[i] === nonZeroValues[i - 1] && !merged[i]) {\n          nonZeroValues[i] += nonZeroValues[i - 1];\n          score += nonZeroValues[i];\n          nonZeroValues[i - 1] = 0;\n          merged[i] = true;\n        }\n      }\n      values = zeroValues.concat(nonZeroValues);\n    } else if (direction === 'up' || direction === 'left') {\n      for (let i = 0; i < nonZeroValues.length - 1; i++) {\n        if (nonZeroValues[i] === nonZeroValues[i + 1] && !merged[i]) {\n          nonZeroValues[i] += nonZeroValues[i + 1];\n          score += nonZeroValues[i];\n          nonZeroValues[i + 1] = 0;\n          merged[i] = true;\n        }\n      }\n      values = nonZeroValues.concat(zeroValues);\n    }\n\n    if (direction === 'down' || direction === 'up') {\n      for (let row = 0; row < data.length; row++) {\n        data[row][tile] = values[row];\n      }\n    } else if (direction === 'left' || direction === 'right') {\n      data[tile] = values.slice();\n    }\n  }\n}\n\nfunction randomizer(count) {\n  for (let i = 0; i < count; i++) {\n    const emptyPositions = [];\n\n    for (let row = 0; row < data.length; row++) {\n      for (let tile = 0; tile < data[row].length; tile++) {\n        if (data[row][tile] === 0) {\n          emptyPositions.push({\n            row, tile,\n          });\n        }\n      }\n    }\n\n    if (emptyPositions.length > 0) {\n      const randomIndex = Math.floor(Math.random() * emptyPositions.length);\n      const { row, tile } = emptyPositions[randomIndex];\n      const randomNumber = Math.random() * 2 > 1.9 ? 4 : 2;\n\n      data[row][tile] = randomNumber;\n    }\n  }\n}\n\nfunction colorizing() {\n  const fieldsRows = document.querySelectorAll('.field-row');\n\n  const classMap = {\n    0: '',\n    2: 'field-cell--2',\n    4: 'field-cell--4',\n    8: 'field-cell--8',\n    16: 'field-cell--16',\n    32: 'field-cell--32',\n    64: 'field-cell--64',\n    128: 'field-cell--128',\n    256: 'field-cell--256',\n    512: 'field-cell--512',\n    1024: 'field-cell--1024',\n    2048: 'field-cell--2048',\n  };\n\n  for (let row = 0; row < data.length; row++) {\n    const cellsInRow = fieldsRows[row].querySelectorAll('.field-cell');\n\n    for (let tile = 0; tile < data[row].length; tile++) {\n      const cellValue = data[row][tile];\n\n      cellsInRow[tile].className = 'field-cell ' + classMap[cellValue];\n    }\n  }\n}\n\nfunction isWin() {\n  for (const row of data) {\n    for (const tile of row) {\n      if (tile === 2048) {\n        messageWin.classList.remove('hidden');\n        inProgress = false;\n      }\n    }\n  }\n}\n\nfunction clearField() {\n  data = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n}\n\nfunction domReload() {\n  const scoreBlock = document.querySelector('.game-score');\n\n  for (let row = 0; row < data.length; row++) {\n    for (let tile = 0; tile < data.length; tile++) {\n      const startRow = document.querySelectorAll('.field-row')[row];\n      const startTile = startRow.querySelectorAll('.field-cell')[tile];\n\n      if (data[row][tile] === 0) {\n        startTile.textContent = ' ';\n        continue;\n      }\n\n      startTile.textContent = data[row][tile];\n    }\n  }\n\n  scoreBlock.textContent = score;\n  colorizing();\n}\n\nfunction isGameOver() {\n  if (data.some(row => row.includes(0))) {\n    return false;\n  }\n\n  for (let row = 0; row < data.length; row++) {\n    for (let tile = 0; tile < data.length - 1; tile++) {\n      if (data[row][tile] === data[row][tile + 1]) {\n        return false;\n      }\n    }\n  }\n\n  for (let tile = 0; tile < data.length; tile++) {\n    for (let row = 0; row < data.length - 1; row++) {\n      if (data[row][tile] === data[row + 1][tile]) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n"],"names":["data","score","inProgress","start","document","querySelector","messageWin","messageStart","messageLose","tileMovement","direction","i","length","_loop","values","nonZeroValues","filter","element","zeroValues","concat","column","row","push","nonZeroValues1","zeroValues1","j","mergeTiles","tile","merged","Array","fill","slice","i1","row1","randomizer","count","emptyPositions","randomIndex","Math","floor","random","_emptyPositions_randomIndex","tile1","randomNumber","isWin","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","value","_iteratorNormalCompletion1","_didIteratorError1","_iteratorError1","_step1","_iterator1","classList","remove","err","return","domReload","scoreBlock","startTile","startRow","querySelectorAll","textContent","colorizing","fieldsRows","classMap","cellsInRow","cellValue","className","isGameOver","some","includes","addEventListener","innerText","replace","add","e","arr2","prevData","JSON","parse","stringify","moveExecuted","key"],"version":3,"file":"index.49ab7a26.js.map"}